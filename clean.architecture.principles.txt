
###################################################### SOLID principles ######################################################


1. Single Responsability Principle (SRP)

A module should have one, and only one, reason to change.
A module should be responsible to one, and only one, user or stakeholder.
A module should be responsible to one, and only one, actor.

2. Open-close principle (OCP)

A software artifact should be open for extension but closed for modification.

3. Liskov Substitution Principle (LSP)

If for each object o1 of type S there is an object o2 of type T such that for all programs 
P defined in terms of T, the behaviour of P is unchanged when o1 is substituted for o2 
then S is a subtype of T.

4. Interface segregation principle (ISP)

No client should be forced to depend on methods it does not use. ISP splits interfaces that are very large 
into smaller and more specific ones so that clients will only have to know about the methods that are of interest to them. 
Such shrunken interfaces are also called role interfaces.

5. Dependency inversion principle (DSP)

The most flexible systems are those in which source code depndencies refer only to abstractions, not to concretitions.



###################################################### Component Cohesion ######################################################


1. Resuse/Release Equivalence Principle

The granule of reuse is the granule of release.

2. Common Closure Principle

Gather into components those classes that change for the same reasons and at the same times.
Separate into different components those classes that change at different times and for different reasons.

3. Common Reuse Principle

Don't force users of a component to depend on things they don't need.



###################################################### Component Coupling ######################################################

1. Acyclic Dependencies Principle

Allow no cycles in the component dependency graph

2. Stable Dependencies Principle

Depend in the direction of stability

3. Stable abstraction principle

A component should be as abstract as it is stable

